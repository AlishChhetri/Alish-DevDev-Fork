---
title: "Syllabus"
toc: true
page-layout: full
---

## Computer Science 203 Fall 2023

### Course Instructor

- **Instructor Name**: Dr. Gregory M. Kapfhammer
- **Office Location**: Alden Hall 108

Please visit the instructor's [web site](https://www.gregorykapfhammer.com/)
for more information!

### Instructor Appointments

- **Monday**: 10:00 -- 11:00 AM, 2:00 PM -- 3:30 PM
- **Tuesday**: 4:30 PM -- 5:00 PM
- **Wednesday**: 4:30 PM -- 5:00 PM
- **Thursday**: 1:30 PM -- 3:00 PM

All instructor appointments are 15-minute time slots and take place in Alden Hall,
Room 108.

::: {.callout-note appearance="minimal" title="Scheduling Appointments"}

To schedule a meeting with the course instructor during office hours, please
visit the [Course Instructor's Appointment
Scheduler](https://www.gregorykapfhammer.com/schedule/). You can schedule an
appointment by clicking a suitable box in Google Calendar's Appointment
Scheduler and then reserving an open time slot. The details about your chosen
appointment will appear in both your Google Calendar and the instructor's Google
Calendar. Please arrive ten minutes in advance for your meeting and be aware
that, by necessity, the meeting before yours may sometimes run late.

:::

### Schedule Overview

- **Discussion, Writing, and Programming Sessions**
  - *Developing Professional Skills*: Monday, 9:00 AM -- 9:50 AM, Alden 109
    - SE Book: [Software Engineering at Google](https://abseil.io/resources/swe-book)
    - First half of class: Discuss executive summaries for chapters read last week
    - Second half of class: Publish a professional précis for next week's chapters
  - *Developing Technical Skills*: Wednesday, 9:00 AM -- 9:50 AM, Alden 109
    - FB Book: [Fuzzing Book](https://www.fuzzingbook.org/)
    - DB Book: [Debugging Book](https://www.debuggingbook.org/)
    - First half of class: Discuss executive summaries for chapters read last week
    - Second half of class: Publish a professional précis for next week's chapters
  - *Developing as Developers*: Friday, 9:00 AM -- 9:50 AM, Alden 109
      - Review the professional précis documents written by team members
      - Create an executive summary for the week's professional skills
      - Create an executive summary for the week's professional skills
      - Publish the executive summaries to the Developer Development web site
      - Confirmation of readiness for next week's in-class discussions
      - When needed, implement and demonstrate software engineering project
- **Collaborative Software Engineering**: Tuesday, 2:30 PM -- 4:20 PM, Alden 109

::: {.callout-note appearance="minimal" title="Active Learning"}

With the goal of ensuring that every student develops as a developer, active
learning plays a central role in the Software Engineering course. This means
that you will be actively publishing your insights through blog post articles,
in accordance with advice from well-known software engineers like [Addy
Osmani](https://addyosmani.com/), who recently published a blog post entitled
["Write about what you learn. It pushes you to understand topics
better."](https://addyosmani.com/blog/write-learn/) You will also be called on
to actively lead and participate in class discussions every week. One key task
that you will complete every week involves running, writing about, and
implementing program source code and publishing program documentation. Aligned
with course goals, you will complete out-of-class programming and writing in
preparation for in-class discussions.

:::

### Course Description

A human-centric study of the principles used during the engineering of
high-quality software systems. In addition to examining the human behaviors and
social processes undergirding software development methodologies, students
participate in teams tasked with designing, developing, and delivering a
significant software application for a customer. During a weekly laboratory
session, students use state-of-the-art software engineering, management, and
communication tools to complete projects, reporting on their results through
both written documents and oral presentations. Students are invited to use their
own departmentally approved laptop in this course; a limited number of laptops
are available for use during class and lab sessions.

- **Prerequisite**: CMPSC 101
- **Distribution Requirements**: SB, SP

::: {.callout-note appearance="minimal" title="Explaining Distribution Requirements" collapse="false"}

- **Scientific Process and Knowledge (SP)**: Courses involving Scientific
Process and Knowledge aim to convey an understanding of what is known or can be
known about the natural world; apply scientific reasoning towards the analysis
and synthesis of scientific information; and create scientifically literate
citizens who can engage productively in problem solving.

- **Learning Outcome**: Students who successfully complete this requirement will
demonstrate an understanding of the nature, approaches, and domain of scientific
inquiry.

- **Social Behavior and Institutions (SB)**: The study of Social Behavior and
Institutions encompasses a broad range of disciplines that use a variety of
methodologies to describe, explain, or predict human behavior, social processes,
and institutional structures as they interact with their environments.

- **Learning Outcome**: Students who successfully complete this requirement will
demonstrate an understanding of at least one methodology used to describe,
explain, or predict human behavior at the level of the individual, small group,
institution, organization, community, or population.

:::

### Learning Objectives

Allegheny College’s educational program is designed so that its graduates are able to:

- **AC-1**: Think critically and creatively.

- **AC-2**: Communicate clearly and persuasively as speakers and writers.

- **AC-3**: Invoke multiple ways of understanding to organize and evaluate
evidence, and to interpret and make sense of their experiences and the
experiences of others.

- **AC-4**: Apply their knowledge and learning to engage in informed debate,
and to analyze and solve problems.

Computer Science 203 at Allegheny College is a core course in the Software
Engineering major. Graduates with the Software Engineering major, who all take
the Computer Science 203 course, must demonstrate their attainment of these
learning objectives:

- **SE-1**: While working in a team, can effectively design, implement,
evaluate, improve, and document a solution to a problem delivered as a
maintainable software system.

  - Enables the attainment of **AC-1** and **AC-4**

- **SE-2**: Demonstrates competency in the theories, models, and practices of
project domains that require the engineering of software.

  - Enables the attainment of **AC-1** and **AC-3**

- **SE-3**: Can effectively manage and predict the cost, scope, and deadline of
a software engineering project.

  - Enables the attainment of **AC-2** and **AC-4**

- **SE-4**: Uses effective oral and written communication methods to explain
both the technical and product-use details of a software artifact.

  - Enables the attainment of **AC-2** and **AC-3**

The following list itemizes the three types of activities and two types of
assessments in Computer Science 203 and illustrates their connection to the
course learning objectives:

- *Course Activities*:
  - **Technical Development**: Develops **SE-1** and **SE-2**
  - **Professional Development**: Develops **SE-3** and **SE-4**
  - **Project Development**: Develops **SE-1** through **SE-4**
- *Course Assessments*:
  - **Executable Examinations**: Assesses **SE-1** and **SE-2**
  - **In-Person Assessments**: Assesses **SE-3** and **SE-4**

Finally, the following list illustrates how the learning objectives for
Allegheny College are attained through the successful completion of Computer
Science 203.

- **AC-1** is attained through the course learning objectives **SE-1** and **SE-2**
- **AC-2** is attained through the course learning objectives **SE-3** and **SE-4**
- **AC-3** is attained through the course learning objectives **SE-2** and **SE-4**
- **AC-4** is attained through the course learning objectives **SE-1** and **SE-3**

::: {.callout-note appearance="minimal" title="Developing as Developers" collapse="false"}

Students who develop both **professionally** and **technically** are effectively
undertaking the task of **developer development**, which is both the theme and
goal of this web site's content!

:::

### Course Textbooks

- [Software Engineering at Google](https://abseil.io/resources/swe-book) - abbreviated on this site as **SE**
- [Fuzzing Book](https://www.fuzzingbook.org/) -- abbreviated on this site as **FB**
- [Debugging Book](https://www.debuggingbook.org/) -- abbreviated on this site as **DB**

Students who complete all of the work on the [course
schedule](../schedule/index.qmd) will read and write a professional précis for
**twelve** reading assignments in **SE** (i.e., **SE1** through **SE12**),
**nine** reading assignments in **FB** (i.e., **FB1** through **FB9**), and
**four** reading assignments in **DB** (i.e., **DB1** through **DB4**).

The course textbooks are connected to the three main type of course activities
in these ways:

- **Professional Development** as a software engineer:
  - Active engagement with content in **SE**
  - Publication of a professional précis of each reading assignment on personal web site
  - Publication of a team-based executive summary on this web site
- **Technical Development** as a software engineer:
  - Active engagement with content in **FB** and **DB**
  - Publication of a professional précis of each reading assignment on personal web site
  - Publication of a team-based executive summary on this web site
- **Project Development** to hone professional and technical knowledge and skills:
  - Application of **SE** to technical and professional tasks during project engineering
  - Application of **FB** and **DB** to the technical tasks during project engineering
  - Integration of professional and technical skills during project engineering

All students are responsible for taking the following steps in regards to **FB**
and **DB**:

- Install an appropriate version of both **FB** and **DB** (both currently designate Python `3.10.2`)
- Create a virtual environment for the book's dependencies with `python -m venv venv`
- Install the book's dependencies with `pip install -r requirements.txt`
- Install all platform-dependent binaries for the book's dependencies (e.g., `graphviz`)
- Troubleshoot all of the issues that arise during the installation of the book's dependencies
- Enter into the virtual environment for a text with `source venv/bin/activate`
- Run a Jupyter Lab server using a command like `venv/bin/jupyter-lab`
- Use the Jupyter Lab server to locate and execute notebooks for chapters in **FB** and **DB**
- Use the [Quarto](https://quarto.org/) system to publish a professional précis for each reading assignment
- Collaboratively use [Quarto](https://quarto.org/) to publish an article's executive summary to this web site

The course will also leverage excerpts from the following supporting text books:

- [Software Engineering - The Soft Parts](https://play.google.com/store/books/details?id=2SmzEAAAQBAJ), by Addy Osmani
- [A Philosophy of Software Design](https://web.stanford.edu/~ouster/cgi-bin/book.php), by John Ousterhout
- [A Philosophy of Software Design](https://web.stanford.edu/~ouster/cgi-bin/book.php), by John Ousterhout
- [How to Write Good Programs: A Guide for Students](https://www.cambridge.org/core/books/how-to-write-good-programs/6CBDD8A564E0899D54140700E90601C4), by Perdita Stevens
- [The Mythical Man-Month](https://en.wikipedia.org/wiki/The_Mythical_Man-Month), by Frederick P. Brooks, Jr.

::: {.callout-note appearance="minimal" title="Accessing the Supporting Textbooks" collapse="false"}

Since the latter four books in the above list are not open-access, the course
instructor will maintain a copy on reserve that will be available during the
class and laboratory sessions.

:::


### Course Policies

#### Assessment

The grade that a student receives in this class will be based on the following
categories. All of these percentages are approximate and, if the need to do so
presents itself, the course instructor may change the assigned percentages
during the academic semester.

| Category                 | Percentage |
|--------------------------|------------|
| Team Participation       |  5%        |
| In-person Assessments    |  5%        |
| Midterm Examinations     |  10%       |
| Final Examination        |  10%       |
| Professional Development |  15%       |
| Technical Development    |  15%       |
| Project Development      |  40%       |

These grading categories have the following definitions:

- **Team Participation**: Students are expected to regularly attend and
actively participate in all class and project development sessions. After either
an unexcused absence or a late attendance to a either a class or project
development session on two separate occasions, a student's course participation
grade will be reduced by half a percentage for each additional time they are
absent or late in an unexcused fashion. Students who need to miss class or
attend class late for an excused reason should communicate their situation to
the course instructor as soon as possible. The content that a student commits to
their GitHub repositories during the weeks devoted to proactive review are also
a component of a student's grade for class participation.

- **Midterm Examinations**: The midterms are online cumulative assessments
covering all prior material from the class, programming, and laboratory
sessions, as outlined on the course schedule. Unless prior arrangements are made
with the instructor, all students should use their computer to take this test on
the scheduled date and to complete it in the stated location while taking no
more than the required amount of time. Each midterm is an executable examination
that a student will complete through the use of GitHub, VS Code, and the
programming tools installed on their laptops.

- **Final Examination**: The final is an online cumulative assessment covering
all of the material from the class, programming, and laboratory sessions, as
outlined on the course schedule. Unless prior arrangements are made with the
instructor, all students should use their computer to take this test on the
scheduled date and to complete it in the stated location while taking no more
than the required amount of time. The cumulative final is an executable
examination that a student will complete through the use of GitHub, VS Code, and
the programming tools installed on their laptops.

- **Professional Development**: Graded on a checkmark basis and building on
material in the textbook and the content covered during that week's in-person
classroom sessions, source code surveys have the following goals: (i) help a
learner to demonstrate that they can remember learned material by recalling
facts, basic concepts, and answers to questions presented in the textbook and on
the course web site and (ii) allow a learner to demonstrate an understanding of
facts and ideas by translating, interpreting, and stating the main technical
ideas presented through the textbook and course web site.

- **Technical Development**: Graded on a checkmark basis and building on material
available in the textbook and the content covered during that week's in-person
classroom session, the programming projects further equip a learner to solve new
problems in the field of data abstraction by applying &mdash; in a new way
&mdash; their knowledge of the facts and techniques of data abstraction and
rigorous Python programming.

- **Project Development**: These assignments invite students to explore
different techniques for rigorously designing, implementing, evaluating, and
documenting real-world Python programs. These assignments also encourage
students to use tools like a text editor, a terminal window, and a modern
Python development environment to implement functions that strike the right
balance between understandability, generalizability, and specialization.
Students will also use the data collected from running experiments to
evaluate the implementation of a Python function as they consider trade-offs
between, for instance, its efficiency, flexibility, and correctness.

#### Assessment Policies

Students who are members of this course's software development team must abide
by the following assessment policies:

#### Assignment Submission

All assignments will have a stated due date shared through GitHub, GitHub
Classroom, and Google Calendar. Electronic versions of the engineering efforts,
programming projects, and source code surveys must be submitted to the
instructor through a student's GitHub repository created by GitHub Classroom. No
credit will be awarded for any course work that you submit to the incorrect
GitHub repository. Unless special arrangements are made with the instructor, no
work will be accepted after the published assignment deadline.

#### Assignment Evaluation

Using a report that the instructor shares with you through your assignment's
GitHub repository, you will privately receive a grade for and feedback on each
assignment. Your grade will be a function of whether or not you completed
correct work that fulfills the project's specification and submitted it by the
deadline. Please refer to the description of [proactive
learning](/proactive-learning/introduction-proactive-learning) for more details
about the evaluation of course assignments.

#### Course Attendance

It is mandatory for all students to attend the course sessions. If, due to
extenuating circumstances, you will not be able to attend a session, then,
whenever possible, please communicate with the instructor at least one week in
advance to describe your situation. Students who have any signs of illness
should not attend any in-person course sessions.

#### Class Preparation

In order to minimize confusion and maximize learning, students must invest time
to prepare for the class discussions, laboratory, and programming sessions.
During the class periods, the course instructor will often pose challenging
questions that could require group discussion, the creation of a Python program
or data table, a vote on a thought-provoking issue, or an in-class
presentation. Only those students who have prepared for class by reading the
assigned material and reviewing the current reading assignments course projects
will be able to effectively participate in these class discussions.

Importantly, only prepared students will be able to acquire the knowledge and
skills that they need to be successful in this course, subsequent courses, and
the field of web development. In order to help students remain organized and to
effectively prepare for classes, the course instructor will maintain a class
schedule with reading assignments and presentation slides, available on this
site. During the class sessions students will also be required to download, use,
and modify Python software components and data sets that are made available through
means such as the course web site or a GitHub repository.

#### Seeking Assistance

Students who are struggling to understand the knowledge and skills developed in
either a class, laboratory, or programming session are encouraged to seek
assistance from the course instructor and the student technical leaders.
Students should, within the bounds of the Honor Code, ask and answer questions
on the Discord server for our course; please request assistance from the
instructor and student technical leaders first through Discord before
sending an email. Students who need the course instructor's assistance must
schedule a meeting through the instructor's office hours calendar and come to the meeting with all
of the details needed to discuss their question. Students can find out the
office hour schedule for student technical leaders by viewing the list of [student
technical leaders](https://www.cs.allegheny.edu/teaching/technicalleaders/).

#### Using GitHub and Discord

This course will primarily use GitHub and Discord for all course communication,
as summarized in the list of [community
connections](/proactive-community/community-connections). We will use GitHub
for the sharing of both source code and course projects and for reporting
issues in those materials. We will use two distinct Discord servers for all
course discussions. The [Proactive Programmers Discord
Server](https://discord.gg/kjah8MFYbR) provides a way for members of the
proactive community to use text and video to chat with each other and will be
the main forum for discussing technical content in data abstraction. The
[Allegheny College Computer Science Discord
Server](https://discord.gg/CS2h9kXzX6) will be the main forum for Department
of Computer Science announcements.

#### Using Email

Although we will primarily use Discord for class communication, the course
instructor will sometimes use email to send announcements about important
matters such as changes in the schedule. It is your responsibility to check your
email at least once a day and to ensure that you can reliably send and receive
emails. This class policy is based on the statement about the use of email that
appears in *The Compass*, the College's student handbook; please see the course
instructor if you do not have this handbook.

#### Honor Code

The Academic Honor Program that governs the entire academic program at Allegheny
College is described in the Allegheny Academic Bulletin. The Honor Program
applies to all work that is submitted for academic credit or to meet non-credit
requirements for graduation at Allegheny College. This includes all work
assigned for this class (e.g., executable examinations and course assignments).
All students who have enrolled in the College will work under the Honor Program.
Each student who has matriculated at the College has acknowledged the following
Honor Code pledge:

> I hereby recognize and pledge to fulfill my responsibilities, as
> defined in the Honor Code, and to maintain the integrity of both
> myself and the College community as a whole.

#### Effective Programming



#### Disability Services

Students with disabilities who believe they may need accommodations in this
class are encouraged to contact Student Accessibility and Support Services at
814-332-2898 or `studentaccessibility@allegheny.edu`. SASS is located in the
Center for Student Success in Pelletier Library. Please do this as soon as
possible to ensure that approved accommodations are implemented in a timely
fashion.

### Welcome Message

In reference to software, Frederick P. Brooks, Jr. wrote in chapter one of *The
Mythical Man Month* that "the magic of myth and legend has come true in our
time." It is so exciting that we can write programs that "come alive" on our
computers! Moreover, efficient Python programs that correctly use, store and
manipulate data have the potential to positively influence the lives of many
people. Moreover, the design, implementation, evaluation, and documentation of
Python-based software are exciting and rewarding activities! The course
instructor invites you to proactively pursue, with great enthusiasm and vigor,
this adventure in data abstraction and rigorous Python programming.
