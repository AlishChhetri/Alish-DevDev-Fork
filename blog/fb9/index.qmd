---
author: [Mordred Boulais, Jaclyn Pham, Naboni Thomas]
title: Reducing Failure-Inducing Inputs
date: '2023-11-22'
date-format: long
categories: [post, software engineering, fuzzing book]
description: <em></em>
toc: true
page-layout: full
---

## Overview

This article covers the
[Reducing Failure-Inducing Inputs](https://www.fuzzingbook.org/html/Reducer.html)
chapter from [Fuzzing Book](https://www.fuzzingbook.org/). This chapter builds
on the concepts from the [Fuzzing](https://www.fuzzingbook.org/html/Fuzzer.html)
and [Fuzzing With Grammars](https://www.fuzzingbook.org/html/Grammars.html)
chapters. Let's dive in to learn more about increasing the efficiency of fuzzed
inputs for debugging!

## Summary

This chapter highlights how testing fuzzed inputs can be unreliable when it
comes time to trace the error back to its source. As such, some steps can be
taken to break the inputs down and find where the error is. This is where the
reductions come into play, wherein the input is split in half and each half is
tested until the source of the error is determined. This can be automated using
a strategy called Delta Debugging, which uses a binary search strategy to
implement the reductions. The class below is built on two created previously in
the chapter, the `Reducer` and the `CachingReducer`, which builds the
functionality for the splitting and for saving the results.

```python
class DeltaDebuggingReducer(CachingReducer):
    """Reduce inputs using delta debugging."""

    def reduce(self, inp: str) -> str:
        """Reduce input `inp` using delta debugging. Return reduced input."""

        self.reset()
        assert self.test(inp) != Runner.PASS

        n = 2     # Initial granularity
        while len(inp) >= 2:
            start = 0.0
            subset_length = len(inp) / n
            some_complement_is_failing = False

            while start < len(inp):
                complement = inp[:int(start)] + \
                    inp[int(start + subset_length):]

                if self.test(complement) == Runner.FAIL:
                    inp = complement
                    n = max(n - 1, 2)
                    some_complement_is_failing = True
                    break

                start += subset_length

            if not some_complement_is_failing:
                if n == len(inp):
                    break
                n = min(n * 2, len(inp))

        return inp
```

In running the `reduce` method of the class presented above, one can find the
character(s) responsible for the error. This form of reducing the failing inputs
also reduces the cognitive load on the programmer, since it is a relatively
simple and straightforward form of testing. It also is, as previously
highlighted, quite clear on the source of the failure. This aids in identifying
duplicates of an issue as well.

Th downside is that this is not the a particularly efficient approach. The best
case for complexity is O(log2n), and the worst is O(n^2), similar to the simple
grammar fuzzer that was explored in a previous chapter.

Also like the simple grammar fuzzer, there is a more efficient, although more
complex, strategy. This is Grammar Based Input Reduction. Using a grammar can,
as previously explred, help with ensuring that the inputs are syntactically
valid for the sake of a program that may outright reject inputs that cannot be
parsed, or inputs where Delta Debugging would not be able to comply with the
constraints of the input's syntax. Using Grammar Based Reduction, the input can
be reduced grammatically instead of via binary, either by replacing subtrees or
by alternative expansion.

Replacing subtrees is done by picking a subtree from the same token and
replacing one higher up with that subtree. Alternative expansion is
checking for alternate children can be chosen that would led to a smaller
overall tree.

## Reflection



## Use Cases
Addressing the challenge posed by fuzz testing, which generates inputs triggering errors without clear localization of the faulty code, `DeltaDebuggingReducer` automates the reduction process. By utilizing the `reduce` function of this class, Chasten can automatically identify and isolate the character(s) responsible for errors in the input. This approach would simplify the testing process and reduces the cognitive load on the software engineer, helping us pinpoint the source of failures. However, it is essential to acknowledge of the trade-off, as the method's efficiency is not optimal, with worst-case complexity of O(n^2). 
To address this limitation, a more sophisticated strategy, Grammar-Based Input Reduction, can be considered. This technique is more efficient compared to the binary search strategy of Delta Debugging. 


{{< include /_back-blog.qmd >}}