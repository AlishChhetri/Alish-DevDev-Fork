---
author: [Jaclyn Pham, Keven Michel Duverglas, Alish Chhetri]
title: What is Software Engineering?
date: '2023-9-22'
date-format: long
categories: [post, professional development, software engineering]
description: <em>How to Work Well on Teams</em>
toc: true
page-layout: full
---

## Summary

In the chapter [How to Work Well on Teams](https://abseil.io/resources/swe-book/html/ch02.html) from the [Software Engineering at Google] (https://abseil.io/resources/swe-book/html/toc.html)book, the article delves into the significance of collaboration and effective communication for software engineers. 

The chapter debunks the idea of the "lone genius" programmer working in isolation to create perfect software, emphasizing that cooperative efforts often yield superior results due to the complexity of software projects. 

The concept of the **bus factor** is defined as "the number of people that need to get hit by a bus before your project is completely doomed."(Credit: [https://en.wikipedia.org/wiki/Bus_factor](https://en.wikipedia.org/wiki/Bus_factor)) emphasizes the importance of shared knowledge and documentation within a team. Keeping code private can lead to a lack of knowledge if a team member leaves unexpectedly, while teamwork ensures that multiple team members can pick up where others left off. 

Additionally, the chapter encourages three fundamental values that help create a positive team environment: 
* Humility: Readily accepting feedback and criticism from team members, understanding that it contributes to personal and collective progress.
* Respect: Valuing the unique contributions of every team member.
* Trust: Fostering an environment where team members have confidence in each other's abilities and judgement.

In summation, the chapter underscores that successful software engineering hinges on teamwork, effective communication, and knowledge sharing, dispelling the myth of the solitary coding genius. A culture of embracing change, learning from errors, and harnessing the diverse perspectives of team members is herald.

## Reflection

TODO

## Use-Case

This chapter has provided invaluable insights into optimizing teamwork and enhancing collaboration within the context of software engineering. Our team member [Mordred](https://mbcompsci203.netlify.app/precis/) made a great point about "the desire to hide and create alone until your project is perfect in order to minimize — or perhaps avoid entirely — the judgement of others." However, the chapter emphasizes that this approach often hinders progress and innovation in software engineering. 

In light of these insights, Another team member, [Simon](https://simon-jones.netlify.app/), 
suggested some actions to consider:

- **Start doing**: Paying closer attention to my interactions with team members and actively noting the various personality types present in the room during collaborative efforts. This heightened awareness can lead to more effective communication and collaboration.

- **Stop doing**: Continuing to work on feature branches strictly alone, or at the very least, refraining from writing entirely isolated test cases that only describe the intended functionality of my code. Encouraging more collaborative and comprehensive testing practices can lead to improved code quality and teamwork.

Once we implement these best practices, the development of [Chasten](https://github.com/AstuteSource/chasten) will take a significant step closer to achieving its goals and objectives.

{{< include /_back-blog.qmd >}}
