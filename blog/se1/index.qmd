---
author: Caleb Kendra, Alish Chhetri, and Evan Nelson
title: Programming Over Time
date: '2023-11-29'
date-format: YYYY
categories: [post, developer development, software engineering]
description: <em>This is our first blog about the `Software Engineering at Google` book!</em>
page-layout: full
---

# Summary

In the preface of "Software Engineering at Google" in the Programming Over Time section we are first introduced to the idea that "Software Engineering" is not just the act of creating code, but also the creation of processes that allow us to create maintainable and sustainable software processes. In this sense, when we release a version of the software we created, we don't want that software to be the final version but rather a building block upon which we can improve. In order to succeed in this goal of sustainability and growth, the book emphasizes three points to be thinking of while creating software:

- Time - In order to make sure that software is created with future improvements in mind, we need to plan out how the software we create will change from the start and finish of a certain project. This means we need to open up our code to make sure that it can be improved upon in future releases.

- Scale - In order to account for workplace growth, need to plan how we will change our engineering methods as our team of engineers develops. So whether that means that our team is growing or shrinking, we need to make sure that our policy change with them.

- Costs - Finally, it is vital to make sure the team knows what projects should be done first as we only have time to implement certain features.

# Reflection

Reflecting on our project's progress, a couple of key takeaways emerge. First, as we tackle this sizable project with our relatively inexperienced team, we must prioritize effective scaling. This means carefully planning and communicating to ensure everyone stays on track as the project grows. Second, we need to weigh the cost of implementing different features against their importance. Given our limited timeframe, we should focus on the most critical aspects to ensure we deliver a working product. Lastly, the insights from Google's software engineering practices stress the importance of a shared goal within a team. Our code should stand the test of time, adapt to changes, and scale effectively. This perspective not only enriches our understanding of software engineering but also sheds light on industry expectations and rigor. By applying these principles, we can enhance our project's sustainability and overall success.

# Action Items

The principles and concepts from "Software Engineering at Google" can be adapted to enhance the development and maintenance of Chasten as a critical computational biology and physiology library. By focusing on sustainability, adaptability, and rigorous engineering practices, Chasten can continue to serve the scientific community effectively. By adapting the principles and concepts from "Software Engineering at Google," Chasten can enhance its development and maintenance, making it more sustainable, adaptable, and robust. This approach will enable Chasten to continue serving the scientific community effectively, meet evolving computational biology and physiology needs, and maintain its relevance in the long term.

